services:
  database:
    # container_name removed for multi-instance deploys
    build: database
    environment:
      - POSTGRES_DB=esus
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=esus
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - esus_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  webserver:
    # container_name removed for multi-instance deploys
    build:
      context: webserver
      args:
        - URL_DOWNLOAD_ESUS=${URL_DOWNLOAD_ESUS:-https://arquivos.esusab.ufsc.br/PEC/bf36cd4a36f49f8e/5.4.11/eSUS-AB-PEC-5.4.11-Linux64.jar}
    environment:
      - APP_DB_URL=jdbc:postgresql://database:5432/esus
      - APP_DB_USER=postgres
      - APP_DB_PASSWORD=esus
    volumes:
      - web_data:/opt/e-SUS
    networks:
      esus_network:
      caddy:
        aliases:
          - ${ESUS_SERVICE_ALIAS:-esus-webserver}
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    labels:
      - caddy=${ESUS_HOST}
      - caddy.reverse_proxy="{{upstreams 8090}}"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080 || curl -sf http://localhost:8090"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
networks:
  esus_network:
    driver: bridge
  caddy:
    external: true
    name: ${CADDY_DOCKER_NETWORK:-caddy}
volumes:
  db_data:
  web_data:
